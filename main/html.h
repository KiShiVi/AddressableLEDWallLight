#ifndef HTML_H
#define HTML_H

// HTML-код страницы
//const char *html_page = "<!DOCTYPE html>\n<html lang=\"ru\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>Енотий светильник</title>\n<style>\nbody {\nbackground: content-box radial-gradient(#00FFFF, #000000);\nheight: 100vh;\nmargin: 0;\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\ncolor: white;\nfont-family: Arial, sans-serif;\n}\n.switch {\nmargin-top: 10px;\nmargin-bottom: 10px;\ndisplay: flex;\nalign-items: center;\nfont-weight: bold;\n}\n.switch input {\ndisplay: none;\n}\n.switch-label {\ncursor: pointer;\ndisplay: inline-block;\nwidth: 60px;\nheight: 34px;\nbackground-color: #ccc;\nborder-radius: 34px;\nposition: relative;\ntransition: background-color 0.2s;\nmargin: 0 10px;\n}\n.switch-label::before {\ncontent: \"\";\nposition: absolute;\nwidth: 26px;\nheight: 26px;\nborder-radius: 50%;\nbackground-color: white;\ntop: 4px;\nleft: 4px;\ntransition: transform 0.2s;\n}\n.switch input:checked + .switch-label {\nbackground-color: #4caf50;\n}\n.switch input:checked + .switch-label::before {\ntransform: translateX(26px);\n}\n.slider-container {\nmargin-bottom: 20px;\n}\n.slider-label {\nmargin-bottom: 5px;\nfont-weight: bold;\n}\n.slider {\n-webkit-appearance: none;\nwidth: 30vh;\nheight: 34px;\nborder-radius: 50px;\noutline: none;\nopacity: 0.7;\ntransition: opacity .2s;\ncursor: pointer;\n}\n.slider:hover {\nopacity: 1;\n}\n#hueSlider {\nbackground: linear-gradient(to right, red, yellow, lime, cyan, blue, magenta, red);\n}\n#saturationSlider {\n}\n#brightnessSlider {\n}\n#speedSlider {\nbackground: linear-gradient(to right, black, white);\n}\n.dropdown {\nmargin-top: 20px;\nmargin-bottom: 20px;\ndisplay: flex;\nalign-items: center;\ncolor: white;\nfont-family: Arial, sans-serif;\nfont-weight: bold;\n}\n.custom-select {\nbackground-color: #008f6f;\ncolor: white;\nborder: none;\nborder-radius: 50px;\npadding: 5px;\nfont-size: 16px;\noutline: none;\ncursor: pointer;\nappearance: none;\nwidth: 20vh;\ntransition: background-color 0.2s;\nmargin-left: 10px;\nfont-weight: bold;\n}\n</style>\n</head>\n<body>\n<h1>Управление енотием</h1>\n<div class=\"switch\">\n<span>Выключить</span>\n<input type=\"checkbox\" id=\"toggleSwitch1\">\n<label class=\"switch-label\" for=\"toggleSwitch1\"></label>\n<span>Включить</span>\n</div>\n<div class=\"dropdown\">\n<label for=\"options\">Выберите опцию:</label>\n<select id=\"options\" class=\"custom-select\">\n<option value=\"option1\">Постоянный цвет</option>\n<option value=\"option2\">Плавная смена цвета</option>\n<option value=\"option3\">Резкая смена цвета</option>\n</select>\n</div>\n<div class=\"slider-container\">\n<div class=\"slider-label\">Оттенок (Hue)</div>\n<input type=\"range\" min=\"0\" max=\"360\" value=\"180\" class=\"slider\" id=\"hueSlider\">\n</div>\n<div class=\"slider-container\">\n<div class=\"slider-label\">Насыщенность (Saturation)</div>\n<input type=\"range\" min=\"0\" max=\"100\" value=\"100\" class=\"slider\" id=\"saturationSlider\">\n</div>\n<div class=\"slider-container\">\n<div class=\"slider-label\">Яркость (Brightness)</div>\n<input type=\"range\" min=\"0\" max=\"100\" value=\"100\" class=\"slider\" id=\"brightnessSlider\">\n</div>\n<div class=\"slider-container\">\n<div class=\"slider-label\">Скорость</div>\n<input type=\"range\" min=\"0\" max=\"100\" value=\"50\" class=\"slider\" id=\"speedSlider\">\n</div>\n</body>\n<script>\nlet lastColorChangeTime = 0;\nconst colorChangeDelay = 5;\nlet lastSpeedChangeTime = 0;\nconst speedChangeDelay = 5;\nconst onOfCheckBox = document.getElementById('toggleSwitch1');\nconst modeDropBox = document.getElementById('options');\nconst hueSlider = document.getElementById('hueSlider');\nconst saturationSlider = document.getElementById('saturationSlider');\nconst brightnessSlider = document.getElementById('brightnessSlider');\nfunction init() {\nonOfCheckBox.addEventListener('change', (event) => toggleSwitch(event, 'on'));\nmodeDropBox.addEventListener('change', (event) => dropBoxValueChanged(event));\nhueSlider.addEventListener('input', () => colorChange(1));\nsaturationSlider.addEventListener('input', () => colorChange(1));\nbrightnessSlider.addEventListener('input', () => colorChange(1));\nhueSlider.addEventListener('change', () => colorChange(0));\nsaturationSlider.addEventListener('change', () => colorChange(0));\nbrightnessSlider.addEventListener('change', () => colorChange(0));\nupdateHSVGradients();\nspeedSlider.addEventListener('input', (event) => speedValueChanged(event, 1));\nspeedSlider.addEventListener('change', (event) => speedValueChanged(event, 0));\n}\nfunction toggleSwitch(event, commandName) {\nconst state = event.target.checked ? '1' : '0';\nconst command = `${commandName}=${state}`;\nsendCommand(command);\n}\nfunction dropBoxValueChanged(event) {\nconst value = event.target.selectedIndex;\nconst command = `mode=${value}`;\nsendCommand(command);\n}\nfunction colorChange(useTimeout) {\nconst now = Date.now();\nconst h = parseInt(hueSlider.value);\nconst s = parseInt(saturationSlider.value);\nconst v = parseInt(brightnessSlider.value);\nconst RGB = hsv_to_RGB(h, s, v);\nconst intRGB = rgbToInt24(RGB.r, RGB.g, RGB.b);\ndocument.body.style.background = `content-box radial-gradient(#${intRGB}, #000000)`;\nupdateHSVGradients();\nif (useTimeout == 1) {\nif (now - lastColorChangeTime < colorChangeDelay) {\nreturn;\n}\n}\nlastColorChangeTime = now;\nconst command = `color=${encodeURIComponent(intRGB)}`;\nsendCommand(command);\n}\nfunction speedValueChanged(event, useTimeout) {\nconst now = Date.now();\nif (useTimeout == 1) {\nif (now - lastSpeedChangeTime < speedChangeDelay) {\nreturn;\n}\n}\nlastSpeedChangeTime = now;\nconst value = parseInt(event.target.value);\nconst command = `speed=${value}`;\nsendCommand(command);\n}\nfunction hsv_to_RGB(H, S, V) {\nlet r, g, b;\nlet s = S / 100;\nlet v = V / 100;\nlet c = v * s;\nlet x = c * (1 - Math.abs((H / 60) % 2 - 1));\nlet m = v - c;\nif (H >= 0 && H < 60) {\nr = c; g = x; b = 0;\n} else if (H >= 60 && H < 120) {\nr = x; g = c; b = 0;\n} else if (H >= 120 && H < 180) {\nr = 0; g = c; b = x;\n} else if (H >= 180 && H < 240) {\nr = 0; g = x; b = c;\n} else if (H >= 240 && H < 300) {\nr = x; g = 0; b = c;\n} else {\nr = c; g = 0; b = x;\n}\nr = Math.round((r + m) * 255);\ng = Math.round((g + m) * 255);\nb = Math.round((b + m) * 255);\nreturn { r, g, b };\n}\nfunction rgbToInt24(r, g, b) {\nreturn ((r << 16) | (g << 8) | b).toString(16).padStart(6, '0');\n}\nfunction updateHSVGradients() {\nconst h = parseInt(hueSlider.value);\nconst s = parseInt(saturationSlider.value);\nconst v = parseInt(brightnessSlider.value);\n}\nfunction sendCommand(command) {\nconsole.log('Send command:', command);\n}\nwindow.onload = init;\n</script>\n</html>\n";

const char html_page[] =
    "<!DOCTYPE html>\n"
    "<html lang=\"ru\">\n"
    "<head>\n"
    "    <meta charset=\"UTF-8\">\n"
    "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
    "    <title>Енотий светильник</title>\n"
    "    <style>\n"
    "\n"
    "\n"
    "\n"
    "        body {\n"
    "            background: content-box radial-gradient(#00FFFF, #000000);\n"
    "            height: 100vh;\n"
    "            margin: 0;\n"
    "            display: flex;\n"
    "            flex-direction: column; /* Вертикальное направление */\n"
    "            justify-content: center;\n"
    "            align-items: center;\n"
    "            color: white;\n"
    "            font-family: Arial, sans-serif;\n"
    "        }\n"
    "        .switch {\n"
    "            margin-top: 10px; /* Отступ сверху для переключателя */\n"
    "			margin-bottom: 10px; /* Отступ сверху для переключателя */\n"
    "            display: flex; /* Используем flexbox для выравнивания элементов */\n"
    "            align-items: center; /* Центрирование по вертикали */\n"
    "			font-weight: bold;\n"
    "        }\n"
    "        .switch input {\n"
    "            display: none; /* Скрыть стандартный чекбокс */\n"
    "        }\n"
    "        .switch-label {\n"
    "            cursor: pointer; /* Указатель курсора для кликабельного элемента */\n"
    "            display: inline-block;\n"
    "            width: 60px;\n"
    "            height: 34px;\n"
    "            background-color: #ccc;\n"
    "            border-radius: 34px; /* Скругление углов */\n"
    "            position: relative;\n"
    "            transition: background-color 0.2s; /* Плавный переход цвета */\n"
    "            margin: 0 10px; /* Отступы слева и справа */\n"
    "        }\n"
    "        .switch-label::before {\n"
    "            content: \"\"; /* Создание псевдоэлемента */\n"
    "            position: absolute; /* Позиционирование относительно родительского элемента */\n"
    "            width: 26px; /* Ширина ползунка */\n"
    "            height: 26px; /* Высота ползунка */\n"
    "            border-radius: 50%; /* Полный круг */\n"
    "            background-color: white; /* Цвет ползунка */\n"
    "            top: 4px; /* Отступ сверху */\n"
    "            left: 4px; /* Отступ слева */\n"
    "            transition: transform 0.2s; /* Плавный переход при движении ползунка */\n"
    "        }\n"
    "        .switch input:checked + .switch-label {\n"
    "            background-color: #4caf50; /* Цвет переключателя при включении */\n"
    "        }\n"
    "        .switch input:checked + .switch-label::before {\n"
    "            transform: translateX(26px); /* Движение ползунка при включении */\n"
    "        }\n"
    "\n"
    "		.slider-container {\n"
    "		  margin-bottom: 20px;\n"
    "		}\n"
    "\n"
    "		.slider-label {\n"
    "		  margin-bottom: 5px;\n"
    "		  font-weight: bold;\n"
    "		}\n"
    "\n"
    "		.slider {\n"
    "		  -webkit-appearance: none;\n"
    "		  width: 30vh;\n"
    "		  height: 34px;\n"
    "		  border-radius: 50px;\n"
    "		  outline: none;\n"
    "		  opacity: 0.7;\n"
    "		  transition: opacity .2s;\n"
    "		  cursor: pointer;\n"
    "		}\n"
    "\n"
    "		.slider:hover {\n"
    "		  opacity: 1;\n"
    "		}\n"
    "\n"
    "		/* Градиенты для ползунков */\n"
    "		#hueSlider {\n"
    "		  background: linear-gradient(to right, red, yellow, lime, cyan, blue, magenta, red);\n"
    "		}\n"
    "\n"
    "		#saturationSlider {\n"
    "		  /* Градиент будет обновляться динамически */\n"
    "		}\n"
    "\n"
    "		#brightnessSlider {\n"
    "		  /* Градиент будет обновляться динамически */\n"
    "		}\n"
    "\n"
    "		#speedSlider {\n"
    "			background: linear-gradient(to right, black, white);\n"
    "		}\n"
    "\n"
    "		.dropdown {\n"
    "			margin-top: 20px; /* Отступ сверху */\n"
    "			margin-bottom: 20px; /* Отступ сверху */\n"
    "			display: flex; /* Flexbox для выравнивания */\n"
    "			align-items: center; /* Центрирование по вертикали */\n"
    "			color: white; /* Цвет текста */\n"
    "			font-family: Arial, sans-serif; /* Единый шрифт */\n"
    "			font-weight: bold;\n"
    "		}\n"
    "\n"
    "		.custom-select {\n"
    "			background-color: #008f6f; /* Фон выпадающего списка */\n"
    "			color: white; /* Цвет текста */\n"
    "			border: none; /* Убираем стандартную рамку */\n"
    "			border-radius: 50px; /* Скругленные углы */\n"
    "			padding: 5px; /* Внутренние отступы для удобства */\n"
    "			font-size: 16px; /* Размер шрифта */\n"
    "			outline: none; /* Убираем обводку при фокусе */\n"
    "			cursor: pointer; /* Курсор в виде руки */\n"
    "			appearance: none; /* Убираем стандартный вид браузера */\n"
    "			width: 20vh; /* Ширина выпадающего списка */\n"
    "			transition: background-color 0.2s; /* Плавный переход при изменении */\n"
    "			margin-left: 10px;\n"
    "			font-weight: bold;\n"
    "		}\n"
    "\n"
    "		/*.custom-select:hover {\n"
    "			background-color: #00ffff; /* Изменение фона при наведении */\n"
    "		}*/\n"
    "\n"
    "\n"
    "\n"
    "    </style>\n"
    "</head>\n"
    "<body>\n"
    "\n"
    "\n"
    "\n"
    "	<!-- Заголовок -->\n"
    "    <h1>Управление енотием</h1>\n"
    "	<!--------------->\n"
    "\n"
    "\n"
    "\n"
    "    <!-- Переключатель 1 - вкл/выкл светодиодную ленту -->\n"
    "    <div class=\"switch\">\n"
    "        <span>Выключить</span>\n"
    "        <input type=\"checkbox\" id=\"toggleSwitch1\"> <!-- Первый переключатель -->\n"
    "        <label class=\"switch-label\" for=\"toggleSwitch1\"></label>\n"
    "        <span>Включить</span>\n"
    "    </div>\n"
    "	<!--------------------------------------------------->\n"
    "\n"
    "\n"
    "\n"
    "	<!-- Выпадающий список режимов енотия -->\n"
    "	<div class=\"dropdown\">\n"
    "		<label for=\"options\">Выберите опцию:</label>\n"
    "		<select id=\"options\" class=\"custom-select\">\n"
    "			<option value=\"option1\">Постоянный цвет</option>\n"
    "			<option value=\"option2\">Плавная смена цвета</option>\n"
    "			<option value=\"option3\">Языки пламени от краёв</option>\n"
    "			<option value=\"option4\">Языки пламени от центра</option>\n"
    "			<option value=\"option5\">Конфетти</option>\n"
    "			<option value=\"option6\">Конфетти RGBY</option>\n"
    "			<option value=\"option7\">Радуга</option>\n"
    "    </select>\n"
    "	</div>\n"
    "	<!-------------------------------------->\n"
    "\n"
    "\n"
    "\n"
    "	<!-- Контейнеры для ползунков выбора цвета -->\n"
    "	<div class=\"slider-container\">\n"
    "	<div class=\"slider-label\">Оттенок (Hue)</div>\n"
    "	<input type=\"range\" min=\"0\" max=\"360\" value=\"180\" class=\"slider\" id=\"hueSlider\" step=\"1\">\n"
    "	</div>\n"
    "\n"
    "	<div class=\"slider-container\">\n"
    "	<div class=\"slider-label\">Насыщенность (Saturation)</div>\n"
    "	<input type=\"range\" min=\"0\" max=\"100\" value=\"100\" class=\"slider\" id=\"saturationSlider\" step=\"1\">\n"
    "	</div>\n"
    "\n"
    "	<div class=\"slider-container\">\n"
    "	<div class=\"slider-label\">Яркость (Brightness)</div>\n"
    "	<input type=\"range\" min=\"0\" max=\"100\" value=\"100\" class=\"slider\" id=\"brightnessSlider\" step=\"1\">\n"
    "	</div>\n"
    "	<!------------------------------------------->\n"
    "\n"
    "\n"
    "\n"
    "	<!-- Ползунок скорости -->\n"
    "	<div class=\"slider-container\">\n"
    "	<div class=\"slider-label\">Скорость</div>\n"
    "	<input type=\"range\" min=\"0\" max=\"100\" value=\"50\" class=\"slider\" id=\"speedSlider\" step=\"1\">\n"
    "	</div>\n"
    "	<!----------------------->\n"
    "\n"
    "\n"
    "\n"
    "</body>\n"
    "    <script>\n"
    "\n"
    "\n"
    "\n"
    "		// --- Глобавльные переменные ---\n"
    "		let lastColorChangeTime 	= 0; 		// Время последнего изменения цвета\n"
    "		const colorChangeDelay 		= 5; 		// Задержка изменения цвета мс\n"
    "\n"
    "		let lastSpeedChangeTime 	= 0; 		// Время последнего изменения скорости\n"
    "		const speedChangeDelay 		= 5; 		// Задержка изменения скорости мс\n"
    "		// ------------------------------\n"
    "\n"
    "\n"
    "\n"
    "		// --- Получаем элементы ползунков и отображения ---\n"
    "		const onOfCheckBox 		= document.getElementById('toggleSwitch1');\n"
    "		const modeDropBox 		= document.getElementById('options');\n"
    "		const hueSlider 		= document.getElementById('hueSlider');\n"
    "		const saturationSlider 	= document.getElementById('saturationSlider');\n"
    "		const brightnessSlider 	= document.getElementById('brightnessSlider');\n"
    "		const colorDisplay 		= document.getElementById('color-display');\n"
    "		const selectedColorText = document.getElementById('selected-color');\n"
    "		// -------------------------------------------------\n"
    "\n"
    "\n"
    "\n"
    "		// --- Инициализация страницы / обработчиков событий ---\n"
    "        function init() {\n"
    "            // - Переключатель 1-\n"
    "            onOfCheckBox.addEventListener('change', (event) => toggleSwitch(event, 'on')); // Команда on\n"
    "			// ------------------\n"
    "\n"
    "			// - Выбор режима - DropBox -\n"
    "			modeDropBox.addEventListener('change', 			(event) => dropBoxValueChanged(event));\n"
    "			// --------------------------\n"
    "\n"
    "			// - Ползунки HSV -\n"
    "			//hueSlider.addEventListener('input', 			() => colorChange(1));\n"
    "			//saturationSlider.addEventListener('input', 		() => colorChange(1));\n"
    "			//brightnessSlider.addEventListener('input', 		() => colorChange(1));\n"
    "\n"
    "			hueSlider.addEventListener('change', 			() => colorChange(0));\n"
    "			saturationSlider.addEventListener('change', 	() => colorChange(0));\n"
    "			brightnessSlider.addEventListener('change', 	() => colorChange(0));\n"
    "\n"
    "			updateHSVGradients();\n"
    "			// ----------------\n"
    "\n"
    "			// - Ползунок скорости -\n"
    "			//speedSlider.addEventListener('input', 			(event) => speedValueChanged(event, 1));\n"
    "			speedSlider.addEventListener('change', 			(event) => speedValueChanged(event, 0));\n"
    "			// ---------------------\n"
    "			updateStatus();\n"
    "        }\n"
    "		// -----------------------------------------------------\n"
    "\n"
    "\n"
    "\n"
    "		// --- Обработчик события изменения состояния переключателя ---\n"
    "        function toggleSwitch(event, commandName) {\n"
    "            const state = event.target.checked ? '1' : '0'; 	// Устанавливаем состояние\n"
    "            const command = `${commandName}=${state}`; 			// Формируем команду\n"
    "            sendCommand(`toggle_changed`, command); 			// Отправляем команду на ESP32\n"
    "        }\n"
    "		// ------------------------------------------------------------\n"
    "\n"
    "\n"
    "\n"
    "		// --- Обработчик события изменения выбранного элемента в DropBox ---\n"
    "        function dropBoxValueChanged(event) {\n"
    "            const value = event.target.selectedIndex;\n"
    "            const command = `mode=${value}`; 					// Формируем команду\n"
    "            sendCommand(`mode_changed`, command); 				// Отправляем команду на ESP32\n"
    "        }\n"
    "		// ------------------------------------------------------------\n"
    "\n"
    "\n"
    "\n"
    "		// --- Обработчик события изменения цвета ---\n"
    "        function colorChange(useTimeout) {\n"
    "			const now = Date.now();\n"
    "\n"
    "			const h = parseInt(hueSlider.value);\n"
    "			const s = parseInt(saturationSlider.value);\n"
    "			const v = parseInt(brightnessSlider.value);\n"
    "\n"
    "			const RGB = hsv_to_RGB(h, s, v);\n"
    "			const intRGB = rgbToInt24(RGB.r, RGB.g, RGB.b);\n"
    "\n"
    "			document.body.style.background = `content-box radial-gradient(#${intRGB}, #000000)`;	// Обновить градиент фона\n"
    "			updateHSVGradients();																// Обновить градиенты ползунков\n"
    "			//colorDisplay.style.backgroundColor = '#' + intRGB;								// Обновить цвет в круге\n"
    "			//selectedColorText.textContent = `Выбранный цвет: #${intRGB}`;						// Обновить текст выбранного цвета\n"
    "\n"
    "			if (useTimeout == 1) {\n"
    "				if (now - lastColorChangeTime < colorChangeDelay) {		// Проверяем, прошло ли время задержки с последнего изменения цвета\n"
    "					return; 											// Если нет, выходим из функции\n"
    "				}\n"
    "			}\n"
    "\n"
    "            lastColorChangeTime = now; 								// Обновляем время последнего изменения цвета\n"
    "            const command = `color=${encodeURIComponent(intRGB)}`; 	// Формируем команду\n"
    "            sendCommand(`color_changed`, command); 									// Отправляем цвет на ESP32\n"
    "        }\n"
    "		// ------------------------------------------\n"
    "\n"
    "\n"
    "\n"
    "		// --- Обработчик события изменения состояния переключателя ---\n"
    "        function speedValueChanged(event, useTimeout) {\n"
    "			const now = Date.now();\n"
    "\n"
    "			if (useTimeout == 1) {\n"
    "				if (now - lastSpeedChangeTime < speedChangeDelay) {		// Проверяем, прошло ли время задержки с последнего изменения скорости\n"
    "					return; 											// Если нет, выходим из функции\n"
    "				}\n"
    "			}\n"
    "			lastSpeedChangeTime = now; 									// Обновляем время последнего изменения скорости\n"
    "            const value = parseInt(event.target.value);\n"
    "            const command = `speed=${value}`; 							// Формируем команду\n"
    "            sendCommand(`speed_changed`, command); 						// Отправляем команду на ESP32\n"
    "        }\n"
    "		// ------------------------------------------------------------\n"
    "\n"
    "\n"
    "\n"
    "		// --- Функция перевода HSV цвета в RGB ---\n"
    "		function hsv_to_RGB(H, S, V) {\n"
    "			let r, g, b;\n"
    "\n"
    "			// Приводим H, S, V к диапазону [0, 1]\n"
    "			let s = S / 100;\n"
    "			let v = V / 100;\n"
    "			let c = v * s; // chroma\n"
    "			let x = c * (1 - Math.abs((H / 60) % 2 - 1));\n"
    "			let m = v - c;\n"
    "\n"
    "			if (H >= 0 && H < 60) {\n"
    "				r = c; g = x; b = 0;\n"
    "			} else if (H >= 60 && H < 120) {\n"
    "				r = x; g = c; b = 0;\n"
    "			} else if (H >= 120 && H < 180) {\n"
    "				r = 0; g = c; b = x;\n"
    "			} else if (H >= 180 && H < 240) {\n"
    "				r = 0; g = x; b = c;\n"
    "			} else if (H >= 240 && H < 300) {\n"
    "				r = x; g = 0; b = c;\n"
    "			} else {\n"
    "				r = c; g = 0; b = x;\n"
    "			}\n"
    "\n"
    "			// Преобразуем RGB в диапазон [0, 255]\n"
    "			r = Math.round((r + m) * 255);\n"
    "			g = Math.round((g + m) * 255);\n"
    "			b = Math.round((b + m) * 255);\n"
    "\n"
    "			return { r, g, b };\n"
    "		}\n"
    "		// ----------------------------------------\n"
    "\n"
    "\n"
    "		// --- Перевод RGB цвета к одной переменной ---\n"
    "		function rgbToInt24(r, g, b) {\n"
    "			return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase();\n"
    "		}\n"
    "		// --------------------------------------------\n"
    "\n"
    "\n"
    "\n"
    "        // Функция отправки команды на ESP32\n"
    "        function sendCommand(commandName, command) {\n"
    "            const url = `/${commandName}?${command}`; // Формируем URL с командой\n"
    "\n"
    "            fetch(url)\n"
    "                .then(response => {\n"
    "                    if (!response.ok) {\n"
    "                        throw new Error('Сеть не доступна');\n"
    "                    }\n"
    "                    return response.json();\n"
    "                })\n"
    "                .then(data => {\n"
    "                    console.log('Команда отправлена:', data);\n"
    "                })\n"
    "                .catch(error => {\n"
    "                    console.error('Ошибка:', error);\n"
    "                });\n"
    "        }\n"
    "\n"
    "\n"
    "		// --- Обновить градиенты ползунков выбора цвета ---\n"
    "		function updateHSVGradients() {\n"
    "			const hue = hueSlider.value; // Значение оттенка (hue)\n"
    "			const saturation = saturationSlider.value; // Значение насыщенности (saturation)\n"
    "			const brightness = brightnessSlider.value; // Значение яркости (value)\n"
    "\n"
    "			const saturationSliderRGB = hsv_to_RGB(hue, 100, brightness);\n"
    "\n"
    "			// Градиент для слайдера насыщенности (от серого до выбранного оттенка с 100% яркостью)\n"
    "			saturationSlider.style.background = `linear-gradient(to right,\n"
    "				rgb(128, 128, 128),\n"
    "				rgb(${saturationSliderRGB.r}, ${saturationSliderRGB.g}, ${saturationSliderRGB.b})\n"
    "			)`;\n"
    "\n"
    "			const brightnessSliderRGB = hsv_to_RGB(hue, saturation, 100);\n"
    "\n"
    "			// Градиент для слайдера яркости (от черного до выбранного оттенка при максимальной насыщенности)\n"
    "			brightnessSlider.style.background = `linear-gradient(to right,\n"
    "				rgb(0, 0, 0),\n"
    "				rgb(${brightnessSliderRGB.r}, ${brightnessSliderRGB.g}, ${brightnessSliderRGB.b})\n"
    "			)`;\n"
    "		}\n"
    "		// -------------------------------------------------\n"
    "\n"
    "		// --- Функция для обновления состояния элементов на странице ---\n"
    "		function updateStatus() {\n"
    "			fetch('/get_status') // Запрашиваем текущий статус с сервера\n"
    "				.then(response => response.json())\n"
    "				.then(data => {\n"
    "					// Обновляем состояние переключателей и слайдеров на основе полученных данных\n"
    "					onOfCheckBox.checked = data.power === '1';\n"
    "					modeDropBox.selectedIndex = data.mode;\n"
    "					hueSlider.value = data.hue;\n"
    "					saturationSlider.value = data.saturation;\n"
    "					brightnessSlider.value = data.brightness;\n"
    "					speedSlider.value = data.speed;\n"
    "\n"
    "					// Обновить отображение цвета и градиентов\n"
    "					colorChange(1);\n"
    "				})\n"
    "				.catch(error => console.error('Ошибка обновления:', error));\n"
    "		}\n"
    "\n"
    "		// Периодическое выполнение функции обновления (каждые 0.2 секунды)\n"
    "		//setInterval(updateStatus, 200);\n"
    "		// --------------------------------------------------------------\n"
    "\n"
    "        // --- Вызываем функцию инициализации после загрузки страницы ---\n"
    "        window.onload = init;\n"
    "\n"
    "		// --------------------------------------------------------------\n"
    "\n"
    "\n"
    "\n"
    "    </script>\n"
;




#endif